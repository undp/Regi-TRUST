extends ../layout  

block content
  //- import functions and mixins used to render form components
  include includes/formFieldsRenderer.pug

  .container
    h1.mt-md-5.mb-md-5.mt-sm-4.mb-sm-4.mt-3.mb-3 Edit Network Entry Submission
    .col.col-xl
      div.row
        ul#progressbar
          each section,i in formJSON.FormSections
            - var step = i + 1
            - var classList = step==currentStep ? ['p-1', 'active'] : ['p-1', 'complete']
            if i < (formJSON.FormSections.length - 1)
              li(class=classList)
                - invalidPage = validation[i] === 'false'
                button.btn.btn-link.progress-nav(type='submit' class=(invalidPage ? 'invalid' : '') form='network-entry' name='RedirectPage' value=step disabled=(step > visited))
                  .text-center
                    span.step-count(data-bs-toggle='tooltip' data-bs-placement='top' data-bs-html='true' title=`Step ${step}: ${section.SectionName}`)=step
                    br 
                    span.step-description.d-none.d-sm-inline=section.SectionName
        div.step-description__outside.text-center.d-block.d-sm-none=`Step ${currentStep}: ${formJSON.FormSections[currentStep-1].SectionName}`    
    form#network-entry.mt-3( action='/form/gccn-network-entry-submission/' + currentStep, method='POST')
      each component in formJSON.FormSections[currentStep-1].Fields
        .row
          .col.col-xl-8
            //- RenderComponent imported from includes/formFieldsRenderer.pug          
            +RenderComponent(component)
      each step,i in formJSON.FormSections
        if(i < formJSON.FormSections.length - 1)
          input(type='hidden' name=`validation[${i}]` id='validation_'+i value=(validation[i]))
      .form-buttons.mb-4.col.col-xl-8
        .form-buttons-left
          if currentStep != formJSON.FormSections.length-1
              button.btn.btn-lg.navigateBtn.mb-2(type='submit', name='SubmitType', value='Next', style='order:2') Next &rsaquo;
          if currentStep != 1
            button.btn.btn-lg.navigateBtn.mb-2(type='submit', name='SubmitType', value='Previous', style='order:1') &lsaquo; Previous
        .form-buttons-right
          -let isFormValid = !validation.includes('false')
          button.btn.btn-lg.submitBtn.mb-2(type='submit', name='SubmitType', value='Save', disabled=!isFormValid) Save and Exit
          button.btn.btn-lg.navigateBtn.mb-2(type='submit', name='SubmitType', value='Cancel') Cancel
        

block scripts
  script(src='https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js')
  script(src='https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js')
  script.
    // handle 'Add element' and 'Remove element' buttons click for editgrid component
    var editGridTemplates = {};
    $('.edit-grid-container').each(function(i, container) {
      
      $(container).find('.removeBtn').click(function() {
        this.closest('.edit-grid-object').remove();
      });

      var template = $(container.firstElementChild).clone(true)[0];
      editGridTemplates[container.id] = template;

      $(container).find('.addBtn').click(function() {
        var insertIndex = container.childElementCount == 1 ? 0 : parseInt($(container).find('.edit-grid-object').last().attr('data-index')) + 1;
        
        
        var inserted = container.insertBefore($(template).clone(true)[0], container.lastElementChild);
        inserted.dataset.index = insertIndex;
        
        var inputs = $(inserted).find('input,select,textarea').each(function() {
          var id=this.id.split(/[\[\]]/);
          id = id.filter(key => key !== '');
          id[id.length - 2]=insertIndex;
          id = id.map((key, i) => {
            if(i > 0)
              key = `[${key}]`

            return key
          })

          id = id.join('')
          this.id=id;
          this.name=id;
          this.value = '';
          this.previousElementSibling.setAttribute('for', id);
        });
      });
    });

    $('form').validate({
      errorClass: 'is-invalid',
      focusInvalid: false,
      invalidHandler: function(event, validator) {
        if(validator.submitButton?.value === 'Next' || validator.submitButton?.value === 'Submit') {
          if (validator.numberOfInvalids()) {
            var element = validator.errorList[0].element;
            element.focus();
            element.scrollIntoView({behavior: 'smooth', block: 'center'});
          }
        }
      }
    })

    const checkPageValid = () => {
      $('#validation_#{currentStep-1}').val($('form').get(0).reportValidity() ? 'true' : 'false')
    }

    const dontValidate = () => {
      $('form').validate().settings.ignore = '*'
    }

    function navigateValidation () {
      checkPageValid()
      dontValidate()
    }

    $('.progress-nav').click(navigateValidation)

    $('.navigateBtn').click(navigateValidation)

    var tooltipList = [];
    $('.tooltip-icon').each((i, icon)=>tooltipList.push(new bootstrap.Popover(icon)));
    if($(window).width()<576)
      $('.step-count').each((i, icon)=>tooltipList.push(new bootstrap.Popover(icon)));
